#include <iostream>

// Singleton 
// Паттерн ПО, который позволяет создавать только один объект в классе
// Из статического к нестатическому обратиться нельзя, а наоборот можно
// Если метод статический, а у меня есть нестатическое поле, то тут будет SE // так как может не сущетсвовать объекта
// Если поле является статическим, и не является const, то инициализировать его НУЖНО  вне класса
class Singleton{
    
    static Singleton* obj; // НЕльзя его инициализировать так как он не const
    const static int x = 1; // Так как это конст, то можно иницилизировать в классе 

    Singleton(){} // Приватный конструктор как раз используется
public:
    static Singleton& GetObject(){
        if(obj) return *obj;
        obj = new Singleton();
        return *obj; 
    }
    static void destroy(){
        delete obj;
    }
};

Singleton* Singleton::obj = nullptr;

class C{
public:
    static int x; // Эта переменная единственная на весь класс и мы можем к ней в main к примеру
    // Оно не принадлежит объекту,  а принадлежит классу.
};

int main(){
    // Static - это тот, который создается при запуске программы, и живет до тех пор, пока
    // работает программа в статической памяти.
    // Также static говорит нам о том, что поле - единственное на весь класс, и мы можем к нему
    // обращаться как:
    C::x = 1; 

    return 0;
}