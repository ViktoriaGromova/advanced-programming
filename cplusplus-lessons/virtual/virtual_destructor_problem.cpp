#include <iostream>

// Проблема виртуального наследование
// Пусть у каждого класса есть свои поля, которые требуют нетривиального уничтожения - нетривиальный деструктор нужен
// По правилу трех если есть оператор копирования или оператор присваивания или деструктор... для них тоже эта проблема может быть 


// деструтор надо писать всегда и будет он не виртуальным  и даже если в деструкторе делать ничего не надо, то 
// надо ВСЕГДА делать и реализовывать виртуальным!!!!
// Или сдлеать virtual ~Base() = 0;

struct Base{
   int *bp = new int();

   virtual ~Base(){
    delete bp;
   }
};

struct Derived :  public Base{
    int*dp = new int();

    ~Derived(){
        delete dp;
       }
};

int main(){
    Base* b = new Derived();

    // Тут есть проблема в том, что тут вызывается деструктор, но деструктор кого, и в compile time смотрит только какой тип
    // И тут будет дестурктор только у Base :)
    // Проблема в том, что тут часть Derived не произойдет
    // и решение - сделать дестуктор виртуальным
    delete b; 
}

